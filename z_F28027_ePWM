
// Included Files
//Give some to Understand DeadBand Registers or Use Manual Config using CMPA/CMPB codes.


#include "DSP28x_Project.h"     // Device Headerfile and Examples Include File


void InitEPwm1Example(void);
//__interrupt void epwm1_isr(void);
//void LED (void);

#define set_tbprd  250  // Period register
#define set_cmpa    125
#define set_cmpb    135
//#define set_db_red   0x0100
//#define set_db_fed   0x0010

int x=0,y=1, flag=0;
//
// Main
//
void main(void)
{

#ifdef _FLASH
    memcpy(&RamfuncsRunStart, &RamfuncsLoadStart, (size_t)&RamfuncsLoadSize);
#endif


   InitSysCtrl();


    InitEPwm1Gpio();

    DINT;

    EALLOW;
    SysCtrlRegs.PCLKCR0.bit.TBCLKSYNC = 0; // PCLKCR0 PERIPHERAL CLOCK CONTROL ....DISABLE TBCLKSYNC i.e. disable EPWM clock
    EDIS;

    InitEPwm1Example();

    EALLOW;
    SysCtrlRegs.PCLKCR0.bit.TBCLKSYNC = 1;  // enable EPWM clock
    EDIS;


    while(1)
    {

                ;
        //__asm("          NOP");
    }
}


/*
__interrupt void epwm1_isr(void)
{

    EPwm1Regs.ETCLR.bit.INT = 1;

    //
    // Acknowledge this interrupt to receive more interrupts from group 3
    //
    PieCtrlRegs.PIEACK.all = PIEACK_GROUP3;
}

*/

void
InitEPwm1Example()
{
    //
    // Setup TBCLK
    //
    EPwm1Regs.TBCTL.bit.CTRMODE = TB_COUNT_UPDOWN; // Count up
    EPwm1Regs.TBPRD = set_tbprd;       // Set timer period
    EPwm1Regs.TBCTL.bit.PHSEN = TB_DISABLE;    // Disable phase loading
    EPwm1Regs.TBPHS.half.TBPHS = 0x0000;       // Phase is 0
    EPwm1Regs.TBCTR = 0x0000;                  // Clear counter
    EPwm1Regs.TBCTL.bit.HSPCLKDIV = TB_DIV2;   // Clock ratio to SYSCLKOUT
    EPwm1Regs.TBCTL.bit.CLKDIV = TB_DIV2;

    //
    // Setup shadow register load on ZERO
    //
    EPwm1Regs.CMPCTL.bit.SHDWAMODE = CC_SHADOW;
    EPwm1Regs.CMPCTL.bit.SHDWBMODE = CC_SHADOW;
    EPwm1Regs.CMPCTL.bit.LOADAMODE = CC_CTR_ZERO;
    EPwm1Regs.CMPCTL.bit.LOADBMODE = CC_CTR_ZERO;

    //
    // Set Compare values
    //
    EPwm1Regs.CMPA.half.CMPA = set_cmpa;    // Set compare A value
    EPwm1Regs.CMPB = set_cmpb;              // Set Compare B value

    //
    // Set actions
    //
    EPwm1Regs.AQCTLA.bit.CAU = AQ_SET;  // Set PWM1A on Zero
    EPwm1Regs.AQCTLA.bit.CAD = AQ_CLEAR;
    //EPwm1Regs.AQCTLA.bit./*CAD*/PRD = AQ_CLEAR;    // Clear PWM1A on event A, up count
    //EPwm1Regs.AQCTLA.bit.CAU = AQ_TOGGLE; //   toggles the pin when the CTR= conditions is matched.

    EPwm1Regs.AQCTLB.bit.CBU = AQ_CLEAR;      // Set PWM1B on Zero
    EPwm1Regs.AQCTLB.bit.CBD = AQ_SET;    // Clear PWM1B on event B, up count

//manual dead band using CMPA value and AQ

/*
    EPwm1Regs.DBCTL.bit.OUT_MODE = 0X03;//DB_FULL_ENABLE;=0X03; //DB_DISABLE;=0X00;//
    EPwm1Regs.DBCTL.bit.POLSEL = 0X01;
    EPwm1Regs.DBCTL.bit.IN_MODE = 0X01;
    EPwm1Regs.DBRED = set_db_red;
    EPwm1Regs.DBFED = set_db_fed;


    EPwm1Regs.ETSEL.bit.INTSEL = ET_CTRU_CMPA;     // Select INT on Zero event
    EPwm1Regs.ETSEL.bit.INTEN = 1;                // Enable INT
    EPwm1Regs.ETPS.bit.INTPRD = ET_2ND;           // Generate INT on 3rd event
*/

}
